<% content_for :javascript do %>
  <script type="text/javascript">
    ShopifyApp.ready(function(){
      ShopifyApp.Bar.initialize({ title: "Orders" });
    });
</script>
<% end %>
<div class='container'>
<div class='row'>
<div class='col-lg-12' style="margin-bottom:20px;">
<span class='h1 text-left' style="display:inline !important;">Orders</span><span class='text-right go-back'><%= link_to '', home_index_path, :class => 'glyphicon glyphicon-circle-arrow-left font-size', :title => 'Go Back' %></span>
</div>
<div class='search-bar'>
<input class="form-control" id="myInput" type="text" placeholder="Search Order..">
</div>
<div class="table-responsive">
<table class="table table-striped">
  <thead>
    <tr>
      <th>Order</th>
      <th><button class="btn btn-default" data-sort-direction="desc" data-sort-value="filedate" type="button">Date <span aria-hidden="true" class="glyphicon glyphicon-chevron-down"></span></button></th>
      <th>Customer</th>
      <th>Payment Status</th>
      <th>Fulfillment Status</th>
      <th>Total Order</th>
      <th>Total</th>
      <th colspan="3"></th>
    </tr>
  </thead>
  <tbody id="myTable">
    <% @orders.each do |order| %>
      <tr>
        <td><%= order.name %></td>
        <td><%= order.created_at %></td>
        <td><%= order.customer.first_name+" "+order.customer.last_name %></td>
        <td><%= order.financial_status %></td>
        <td><% if order.fulfillment_status %>
           <%= order.fulfillment_status %>
           <% else %>
           Unfulfilled
           <% end %></td>  
      <td><%= order.customer.orders_count %></td>    
      <td><%= order.total_price %></td>        
      </tr>
    <% end %>
  </tbody>
</table>
</div>
</div>

<script>
  // init Isotope
  var $grid = $('.uploads-row').isotope({
    itemSelector: '.col-media',
    layoutMode: 'fitRows',
    getSortData: {
      fileby:   '.file-by',
      filename: '.file-name',
      filedate: '[data-ticks]',
      filesize: function( itemElem ) {
        var filesize = $( itemElem ).attr('data-filesize');
        return parseInt( filesize );
      }
    }
  });

  // bind filter button click
  $('.filters-button-group').on('click', 'button', function () {
    var filterValue = $(this).attr('data-filter');
    $grid.isotope({ filter: filterValue });
  });

  // bind sort button click
  $('.sort-button-group').on( 'click', 'button', function() {

    /* Get the element name to sort */
    var sortValue = $(this).attr('data-sort-value');

    /* Get the sorting direction: asc||desc */
    var direction = $(this).attr('data-sort-direction');

    /* convert it to a boolean */
    var isAscending = (direction == 'asc');
    var newDirection = (isAscending) ? 'desc' : 'asc';

    /* pass it to isotope */
    $grid.isotope({ sortBy: sortValue, sortAscending: isAscending });

    $(this).attr('data-sort-direction', newDirection);

    var span = $(this).find('.glyphicon');
    span.toggleClass('glyphicon-chevron-up glyphicon-chevron-down');

  });
  </script>
</div>

